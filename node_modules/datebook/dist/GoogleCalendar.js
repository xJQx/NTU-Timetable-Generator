"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CalendarBase_1 = require("./CalendarBase");
var data_1 = require("./utils/data");
var ics_1 = require("./utils/ics");
var time_1 = require("./utils/time");
var constants_1 = require("./constants");
/**
 * Generates a Google Calendar url.
 */
var GoogleCalendar = /** @class */ (function (_super) {
    __extends(GoogleCalendar, _super);
    function GoogleCalendar(opts) {
        var _this = _super.call(this, opts) || this;
        /**
         * Sets the basic properties for the calendar instance.
         */
        _this.setInitialParams = function () {
            var timestampFormat = constants_1.FORMAT.DATE;
            if (!_this.isAllDay) {
                timestampFormat += constants_1.FORMAT.TIME;
            }
            var dates = [
                time_1.default.formatDate(_this.start, timestampFormat),
                time_1.default.formatDate(_this.end, timestampFormat)
            ].join('/');
            _this
                .setParam('action', 'TEMPLATE')
                .setParam('dates', dates)
                .setParam('text', _this.title)
                .setParam('details', _this.description)
                .setParam('location', _this.location)
                .setParam('allday', _this.isAllDay.toString());
            if (_this.recurrence) {
                _this.setParam('recur', "RRULE:" + ics_1.default.getRrule(_this.recurrence));
            }
            if (_this.attendees.length > 0) {
                _this.setParam('add', data_1.default.toMailtoList(_this.attendees).join(','));
            }
        };
        /**
         * Generates the Google Calendar url.
         *
         * @returns {string}
         */
        _this.render = function () {
            var baseUrl = constants_1.URL.GOOGLE;
            var queryString = data_1.default.toQueryString(_this.params);
            return baseUrl + "?" + queryString;
        };
        _this.setInitialParams();
        return _this;
    }
    return GoogleCalendar;
}(CalendarBase_1.default));
exports.default = GoogleCalendar;
