"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CalendarBase_1 = require("./CalendarBase");
var constants_1 = require("./constants");
var data_1 = require("./utils/data");
var time_1 = require("./utils/time");
var yahoo_1 = require("./utils/yahoo");
/**
 * Generates a Yahoo! Calendar url.
 *
 * @remark Yahoo! Calendar's support for recurrence is limited to only the interval and frequency.
 */
var YahooCalendar = /** @class */ (function (_super) {
    __extends(YahooCalendar, _super);
    function YahooCalendar(opts) {
        var _this = _super.call(this, opts) || this;
        /**
         * Sets the basic properties for the calendar instance.
         */
        _this.setInitialParams = function () {
            _this
                .setParam('v', '60') // version number; must be 60
                .setParam('title', _this.title)
                .setParam('desc', _this.description)
                .setParam('in_loc', _this.location);
            _this.setTimeParams();
            _this.setRecurrenceParams();
            if (_this.attendees.length > 0) {
                _this.setParam('inv_list', data_1.default.toMailtoList(_this.attendees).join(','));
            }
        };
        /**
         * Sets the start/end/allday parameters.
         */
        _this.setTimeParams = function () {
            if (_this.isAllDay) {
                _this
                    .setParam('dur', 'allday')
                    .setParam('st', time_1.default.formatDateNoUtc(_this.start, constants_1.FORMAT.DATE));
            }
            else {
                _this.setParam('st', time_1.default.formatDateNoUtc(_this.start, constants_1.FORMAT.NO_UTC_FULL));
                if (time_1.default.getHoursDiff(_this.start.getTime(), _this.end.getTime()) > 99) {
                    // Yahoo only supports up to 99 hours, so we are forced to specify the end time instead of the duration
                    _this.setParam('et', time_1.default.formatDateNoUtc(_this.end, constants_1.FORMAT.NO_UTC_FULL));
                }
                else {
                    // we prefer specifying duration in lieu of end time, because apparently Yahoo's end time is buggy w.r.t. timezones
                    _this.setParam('dur', time_1.default.getDuration(_this.start.getTime(), _this.end.getTime()));
                }
            }
        };
        /**
         * Sets the recurrence parameters, if recurrence is specified.
         */
        _this.setRecurrenceParams = function () {
            if (_this.recurrence) {
                _this.setParam('RPAT', yahoo_1.default.getRecurrence(_this.recurrence));
                if (_this.recurrence.end) {
                    _this.setParam('REND', time_1.default.formatDateNoUtc(_this.recurrence.end, constants_1.FORMAT.DATE));
                }
                else {
                    var days = time_1.default.getRecurrenceLengthDays(_this.recurrence);
                    var rend = time_1.default.incrementDate(_this.end, Math.ceil(days));
                    _this.setParam('REND', time_1.default.formatDateNoUtc(rend, constants_1.FORMAT.DATE));
                }
            }
        };
        /**
         * Generates the Yahoo! Calendar data.
         *
         * @returns {string}
         */
        _this.render = function () {
            var baseUrl = constants_1.URL.YAHOO;
            var queryString = data_1.default.toQueryString(_this.params);
            return baseUrl + "?" + queryString;
        };
        _this.setInitialParams();
        return _this;
    }
    return YahooCalendar;
}(CalendarBase_1.default));
exports.default = YahooCalendar;
