"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var time_1 = require("./utils/time");
/**
 * Base calendar class. This class can be extended to add new calendar services.
 */
var CalendarBase = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {CalendarOptions} options
     */
    function CalendarBase(options) {
        var _this = this;
        /** True if the event is one that spans the entire day. */
        this.isAllDay = false;
        /** Event description. */
        this.description = '';
        /** Event title. */
        this.title = '';
        /** Event physical location. */
        this.location = '';
        /** Start time of the event. */
        this.start = new Date();
        /** End time of the event. */
        this.end = new Date();
        /** Calendar service query string params. */
        this.params = {};
        /** Array of event attendees. See {@link CalendarAttendee} */
        this.attendees = [];
        /**
         * Sets the description, title and location.
         *
         * @param {CalendarOptions} options
         */
        this.setText = function (options) {
            _this.description = options.description || '';
            _this.title = options.title || '';
            _this.location = options.location || '';
        };
        /**
         * Sets the time and recurrence parameters.
         *
         * @param {CalendarOptions} options
         */
        this.setTimestamps = function (options) {
            _this.isAllDay = !options.end;
            _this.start = options.start;
            // if no end date is specified, make the end date exactly 1 day from the start date
            _this.end = options.end || time_1.default.incrementDate(_this.start, 1);
            _this.recurrence = options.recurrence;
        };
        /**
         * Sets additional calendar service properties.
         * May be used to override existing query string params if necessary.
         *
         * @param {string} key
         * @param {string | null} value
         * @returns {CalendarBase}
         */
        this.setParam = function (key, value) {
            _this.params[key] = value;
            return _this;
        };
        this.setText(options);
        this.setTimestamps(options);
        this.setAttendees(options);
    }
    /**
     * Sets the attendees array if attendees are supplied.
     *
     * @param {CalendarOptions} options
     */
    CalendarBase.prototype.setAttendees = function (options) {
        this.attendees = Array.isArray(options.attendees) ? options.attendees : [];
    };
    return CalendarBase;
}());
exports.default = CalendarBase;
