"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CalendarBase_1 = require("./CalendarBase");
var constants_1 = require("./constants");
var data_1 = require("./utils/data");
var time_1 = require("./utils/time");
/**
 * Generates an Outlook Calendar url.
 *
 * @remark Outlook Calendar's query string params do not support recurrence.
 */
var OutlookCalendar = /** @class */ (function (_super) {
    __extends(OutlookCalendar, _super);
    function OutlookCalendar(opts) {
        var _this = _super.call(this, opts) || this;
        /** Base URL for the host service. */
        _this.baseUrl = constants_1.URL.OUTLOOK;
        /**
         * Sets the basic properties for the calendar instance.
         */
        _this.setInitialParams = function () {
            var timestampFormat = constants_1.FORMAT.OUTLOOK_DATE;
            if (!_this.isAllDay) {
                timestampFormat += constants_1.FORMAT.OUTLOOK_TIME;
            }
            _this
                .setParam('rru', 'addevent')
                .setParam('path', '/calendar/action/compose')
                .setParam('startdt', time_1.default.formatDate(_this.start, timestampFormat))
                .setParam('enddt', time_1.default.formatDate(_this.end, timestampFormat))
                .setParam('subject', _this.title)
                .setParam('body', _this.description)
                .setParam('location', _this.location)
                .setParam('allday', _this.isAllDay.toString());
            if (_this.attendees.length > 0) {
                _this.setParam('to', data_1.default.toMailtoList(_this.attendees).join(','));
            }
        };
        /**
         * Sets the host service type. The default host for Outlook is **`live`**.
         *
         * @param {string} host - `live` (for personal accounts) or `office` (for Office365)
         * @returns {OutlookCalendar}
         */
        _this.setHost = function (host) {
            if (['live', 'office'].includes(host)) {
                _this.baseUrl = constants_1.URL.OUTLOOK.replace('{{host}}', host);
            }
            return _this;
        };
        /**
         * Generates the Outlook url.
         *
         * @returns {string}
         */
        _this.render = function () {
            var queryString = data_1.default.toQueryString(_this.params);
            return _this.baseUrl + "?" + queryString;
        };
        _this.setInitialParams();
        _this.setHost('live');
        return _this;
    }
    return OutlookCalendar;
}(CalendarBase_1.default));
exports.default = OutlookCalendar;
