"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var data_1 = require("./data");
var time_1 = require("./time");
/**
 * Maps the given Recurrence weekdays to a Yahoo! weekdays format.
 * This will strip out any count prefixes, as they're not supported by YC.
 * Example: 1MO,2TU,3WE becomes MoTuWe
 *
 * @param {string[]} [weekdays = []]
 * @returns {string}
 */
var getWeekdays = function (weekdays) {
    if (weekdays === void 0) { weekdays = []; }
    return weekdays
        .map(function (w) {
        return data_1.default.toProperCase(w.replace(/[^A-Z]/ig, ''));
    })
        .join('');
};
/**
 * Maps the given Recurrence frequency to a Yahoo! frequency format.
 * Example: DAILY becomes Dy; MONTHLY becomes Mh
 *
 * @param {string} frequency
 * @returns {string}
 */
var getFrequency = function (frequency) {
    var FREQUENCY = constants_1.RECURRENCE.FREQUENCY;
    switch (frequency) {
        case FREQUENCY.YEARLY:
            return 'Yr';
        case FREQUENCY.MONTHLY:
            return 'Mh';
        case FREQUENCY.WEEKLY:
            return 'Wk';
        default:
            return 'Dy'; // daily
    }
};
/**
 * Converts the Recurrence to a Yahoo! recurrence string.
 *
 * @param {CalendarRecurrence} recurrence
 * @returns {string}
 */
var getRecurrence = function (recurrence) {
    var _a;
    var frequency = getFrequency(recurrence.frequency);
    var weekdays = getWeekdays(recurrence.weekdays);
    var _b = recurrence.interval, interval = _b === void 0 ? 1 : _b;
    var prefix = '';
    if (((_a = recurrence.weekdays) === null || _a === void 0 ? void 0 : _a.length) && recurrence.frequency === constants_1.RECURRENCE.FREQUENCY.MONTHLY) {
        // YC only supports the first count of a recurring weekday
        // e.g., -1FR,2TU (every last Friday and every second Tuesday) is NOT supported, but
        // -1FR,TU (every last Friday and Tuesday) IS supported -- strip out all prefixes from
        // the list, then find the first nonzero prefix (if any) and prepend it to the list
        var matches = recurrence.weekdays[0].match(/^([1-5])/);
        prefix = matches ? matches[0] : '1';
    }
    return [
        time_1.default.addLeadingZero(interval),
        frequency,
        prefix,
        weekdays
    ].join('');
};
exports.default = {
    getWeekdays: getWeekdays,
    getFrequency: getFrequency,
    getRecurrence: getRecurrence
};
