"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
/**
 * Adds a leading zero to a single-digit string and returns a two-digit string.
 *
 * @param {number | string} n
 * @returns {string}
 */
var addLeadingZero = function (n) {
    if (n === void 0) { n = ''; }
    return ("0" + parseInt(n.toString(), 10)).slice(-2);
};
/**
 * Returns the duration between two given dates in hhmm format.
 *
 * @param {number} start
 * @param {number} end
 * @returns {string}
 */
var getDuration = function (start, end) {
    var seconds = Math.floor((end - start) / 1000);
    var hours = Math.floor(seconds / 3600);
    var mins = ((seconds / 3600) % 1) * 60;
    return "" + addLeadingZero(hours) + addLeadingZero(mins);
};
/**
 * Returns the number of hours between two given dates.
 *
 * @param {number} start
 * @param {number} end
 * @returns {number}
 */
var getHoursDiff = function (start, end) {
    var seconds = Math.floor((end - start) / 1000);
    return Math.floor(seconds / 3600);
};
/**
 * Computes the number of days a recurrence will last.
 *
 * @param {CalendarRecurrence} recurrence
 * @returns {number}
 */
var getRecurrenceLengthDays = function (recurrence) {
    var frequency = recurrence.frequency, interval = recurrence.interval;
    var FREQUENCY = constants_1.RECURRENCE.FREQUENCY;
    if (interval) {
        switch (frequency) {
            case FREQUENCY.YEARLY:
                return interval * 365.25;
            case FREQUENCY.MONTHLY:
                return interval * 30.42; // avg days in a year
            case FREQUENCY.WEEKLY:
                return interval * 7;
            default:
                return interval; // daily
        }
    }
    // if no frequency is specified, set an arbitrarily-long recurrence end
    return 365.25 * 100; // 100 years
};
/**
 * Formats the given JS Date() object to the given format.
 * Format defaults to: YYYYMMDDTHHMMss
 *
 * @param {Date} [d = new Date()]
 * @param {string} format
 * @returns {string}
 */
var formatDate = function (d, format) {
    if (d === void 0) { d = new Date(); }
    var dateValues = {
        YYYY: d.getUTCFullYear(),
        MM: addLeadingZero(d.getUTCMonth() + 1),
        DD: addLeadingZero(d.getUTCDate()),
        hh: addLeadingZero(d.getUTCHours()),
        mm: addLeadingZero(d.getUTCMinutes()),
        ss: addLeadingZero(d.getUTCSeconds())
    };
    return Object
        .keys(dateValues)
        .reduce(function (date, key) {
        return date.replace(key, dateValues[key].toString());
    }, format);
};
/**
 * Formats the given JS Date() object to the given format, not using UTC
 * Format defaults to: YYYYMMDDTHHMMss
 *
 * @param {Date} [d = new Date()]
 * @param {string} format
 * @returns {string}
 */
var formatDateNoUtc = function (d, format) {
    if (d === void 0) { d = new Date(); }
    var dateValues = {
        YYYY: d.getFullYear(),
        MM: addLeadingZero(d.getMonth() + 1),
        DD: addLeadingZero(d.getDate()),
        hh: addLeadingZero(d.getHours()),
        mm: addLeadingZero(d.getMinutes()),
        ss: addLeadingZero(d.getSeconds())
    };
    return Object
        .keys(dateValues)
        .reduce(function (date, key) {
        return date.replace(key, dateValues[key].toString());
    }, format);
};
/**
 * Returns the current timestamp.
 *
 * @returns {string}
 */
var getTimeCreated = function () {
    return formatDate(new Date(), constants_1.FORMAT.DATE);
};
/**
 * Increments dates by the given number of days.
 * This will account for edge cases, such as leap years.
 *
 * @param {Date} dateInput - date to increment
 * @param {number} days - number of days
 * @returns {Date}
 */
var incrementDate = function (dateInput, days) {
    var additionalTime = days * 86400000;
    var newDate = new Date();
    newDate.setTime(dateInput.getTime() + additionalTime);
    return newDate;
};
exports.default = {
    addLeadingZero: addLeadingZero,
    getDuration: getDuration,
    getHoursDiff: getHoursDiff,
    getRecurrenceLengthDays: getRecurrenceLengthDays,
    formatDate: formatDate,
    formatDateNoUtc: formatDateNoUtc,
    getTimeCreated: getTimeCreated,
    incrementDate: incrementDate
};
