"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var identity = function (str) { return str; };
/**
 * Creates a param string from a flat key-value pair.
 *
 * @param {Record<string, string>} params
 * @param {string} [delimiter = ';']
 * @param {Function} [transformFn = identity] - transformation function to be applied to each param
 * @returns {string}
 */
var toParamString = function (params, delimiter, transformFn) {
    if (delimiter === void 0) { delimiter = ';'; }
    if (transformFn === void 0) { transformFn = identity; }
    var paramString = [];
    for (var key in params) {
        if (params.hasOwnProperty(key) && params[key] !== undefined) {
            paramString.push(key + "=" + transformFn(params[key]));
        }
    }
    return paramString.join(delimiter);
};
/**
 * Creates a query string from a flat key-value pair.
 *
 * @param {Record<string, string | null>} params
 * @returns {string}
 */
var toQueryString = function (params) {
    // filter the record set to remove null values
    var filteredParams = Object
        .keys(params)
        .filter(function (p) { return params[p] !== null; })
        .reduce(function (p, k) {
        var _a;
        return (__assign(__assign({}, p), (_a = {}, _a[k] = params[k], _a)));
    }, {});
    return toParamString(filteredParams, '&', encodeURIComponent);
};
/**
 * Creates an ICS param string from a flat key-value pair.
 *
 * @param {Record<string, string>} params
 * @returns {string}
 */
var toIcsParamString = function (params) {
    return toParamString(params, ';');
};
/**
 * Renders a comma-separated string of mailto values.
 * (e.g., 'John Doe <john@doe.com>,Jane Doe <jane@doe.com>')
 *
 * @param {CalendarAttendee[]} attendees
 * @returns {string[]}
 */
var toMailtoList = function (attendees) {
    return attendees
        .map(function (_a) {
        var email = _a.email, name = _a.name;
        return name
            ? name + " <" + email + ">"
            : email;
    });
};
/**
 * Converts the given string to ProperCase.
 *
 * @param {string} s
 * @returns {string}
 */
var toProperCase = function (s) {
    return [
        s[0].toUpperCase(),
        s.slice(-s.length + 1).toLowerCase()
    ].join('');
};
exports.default = {
    toParamString: toParamString,
    toQueryString: toQueryString,
    toIcsParamString: toIcsParamString,
    toMailtoList: toMailtoList,
    toProperCase: toProperCase
};
