"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
var CalendarBase_1 = require("./CalendarBase");
var constants_1 = require("./constants");
var data_1 = require("./utils/data");
var ics_1 = require("./utils/ics");
var time_1 = require("./utils/time");
/**
 * Generates a downloadable ICS file.
 */
var ICalendar = /** @class */ (function (_super) {
    __extends(ICalendar, _super);
    function ICalendar(opts) {
        var _this = _super.call(this, opts) || this;
        /** List of additional ICalendar events to add. */
        _this.additionalEvents = [];
        /** List of VEVENT property-value entries */
        _this.properties = [];
        /** Key-value pair of basic calendar properties. */
        _this.meta = {};
        /**
         * Sets the basic properties for the calendar instance.
         */
        _this.setInitialParams = function () {
            _this
                .setMeta('UID', ics_1.default.getUid())
                .setMeta('DTSTAMP', time_1.default.getTimeCreated())
                .setMeta('PRODID', ics_1.default.getProdId());
            _this
                .addProperty('CLASS', 'PUBLIC')
                .addProperty('DESCRIPTION', ics_1.default.formatText(_this.description))
                .addProperty('DTSTART', time_1.default.formatDate(_this.start, constants_1.FORMAT.FULL))
                .addProperty('DTEND', time_1.default.formatDate(_this.end, constants_1.FORMAT.FULL))
                .addProperty('LOCATION', ics_1.default.formatText(_this.location))
                .addProperty('SUMMARY', ics_1.default.formatText(_this.title))
                .addProperty('TRANSP', 'TRANSPARENT');
            if (_this.recurrence) {
                _this.addProperty('RRULE', ics_1.default.getRrule(_this.recurrence));
            }
            if (_this.attendees.length > 0) {
                _this
                    .attendees
                    .forEach(function (_a) {
                    var email = _a.email, name = _a.name, _b = _a.icsOptions, icsOptions = _b === void 0 ? {} : _b;
                    var params = _this.getAttendeeParams(icsOptions, name);
                    var mailto = "MAILTO:" + email;
                    _this.addProperty(params, mailto);
                });
            }
        };
        /**
         * Generates the ATTENDEE property param based on user-specified options and the attendee name.
         *
         * @param {ICSAttendeeOptions} options
         * @param {string} name
         * @returns {string}
         */
        _this.getAttendeeParams = function (options, name) {
            var params = {};
            if (name)
                params['CN'] = name;
            if (options.delegatedFrom)
                params['DELEGATED-FROM'] = options.delegatedFrom;
            if (options.partStat)
                params['PARTSTAT'] = options.partStat;
            if (options.role)
                params['ROLE'] = options.role;
            if (options.sentBy)
                params['SENT-BY'] = options.sentBy;
            params['RSVP'] = options.rsvp ? 'TRUE' : 'FALSE';
            var paramString = data_1.default.toParamString(params, ';');
            return "ATTENDEE;" + paramString;
        };
        /**
         * Generates a valid ICS alarm duration.
         *
         * @example getAlarmDuration({ minutes: 3, seconds: 2 }) -> PT3M2S
         * @param {ICSDuration} duration
         * @returns {string}
         */
        _this.getAlarmDuration = function (duration) {
            var features = [
                duration.weeks + "W",
                duration.days + "D",
                duration.hours + "H",
                duration.minutes + "M",
                duration.seconds + "S"
            ].filter(function (s) { return /^[0-9]+[A-Z]$/.exec(s); }); // exclude zero-duration features
            features.unshift(duration.after ? 'PT' : '-PT');
            return features.join('');
        };
        /**
         * Sets iCalendar meta properties, such as UID, DTSTAMP, etc.
         *
         * @param {string} key
         * @param {string} value
         * @returns {ICalendar}
         */
        _this.setMeta = function (key, value) {
            _this.meta[key] = value;
            return _this;
        };
        /**
         * Adds the given event to the same `.ics` file instance.
         *
         * @param {ICalendar} event
         * @returns {ICalendar}
         */
        _this.addEvent = function (event) {
            _this.additionalEvents.push(event);
            return _this;
        };
        /**
         * Adds any additional desired iCalendar property having the given key-value pair to the instance.
         *
         * @param {Alarm} alarm
         * @returns {ICalendar}
         */
        _this.addProperty = function (key, value) {
            if (typeof value === 'object') {
                _this.properties.push("BEGIN:" + key);
                for (var k in value) {
                    _this.addProperty(k, value[k]);
                }
                _this.properties.push("END:" + key);
            }
            else {
                _this.properties.push(key + ":" + value.toString());
            }
            return _this;
        };
        /**
         * Adds an alarm. Multiple different alarms may be added to a single instance.
         *
         * @param {Alarm} alarm
         * @returns {ICalendar}
         */
        _this.addAlarm = function (alarm) {
            var value = {
                ACTION: alarm.action
            };
            if (alarm.description)
                value.DESCRIPTION = ics_1.default.formatText(alarm.description);
            if (alarm.summary)
                value.SUMMARY = ics_1.default.formatText(alarm.summary);
            if (alarm.duration)
                value.DURATION = _this.getAlarmDuration(alarm.duration);
            if (alarm.repeat)
                value.REPEAT = alarm.repeat;
            if (alarm.attach) {
                var key = alarm.attach.params
                    ? "ATTACH;" + alarm.attach.params
                    : 'ATTACH';
                value[key] = alarm.attach.url;
            }
            if (alarm.trigger instanceof Date) {
                value['TRIGGER;VALUE=DATE-TIME'] = time_1.default.formatDate(alarm.trigger, constants_1.FORMAT.FULL);
            }
            else {
                value['TRIGGER'] = _this.getAlarmDuration(alarm.trigger);
            }
            return _this.addProperty('VALARM', value);
        };
        /**
         * Downloads the rendered iCalendar.
         *
         * @remark Only works in browsers.
         *
         * @param {string} fileName optional explicit file name, if not provided then will be constructed from title
         */
        _this.download = function (fileName) {
            ics_1.default.download(fileName || ics_1.default.getFileName(_this.title), _this.render());
        };
        /**
         * Generates the iCalendar data.
         *
         * @returns {string}
         */
        _this.render = function () {
            var vEvents = _this
                .additionalEvents
                .concat(_this)
                .reduce(function (properties, calendar) { return __spreadArray(__spreadArray(__spreadArray(__spreadArray([], properties), [
                'BEGIN:VEVENT'
            ]), calendar.properties), [
                'END:VEVENT'
            ]); }, []);
            var meta = Object
                .keys(_this.meta)
                .map(function (key) {
                return key + ":" + _this.meta[key];
            });
            return __spreadArray(__spreadArray(__spreadArray([
                'BEGIN:VCALENDAR',
                'VERSION:2.0'
            ], vEvents), [
                'END:VCALENDAR'
            ]), meta).join('\n');
        };
        _this.setInitialParams();
        return _this;
    }
    return ICalendar;
}(CalendarBase_1.default));
exports.default = ICalendar;
